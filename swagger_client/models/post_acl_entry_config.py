# coding: utf-8

"""
    Sonic NMS

    Network management Open APIs for Broadcom's Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: mohammed.faraaz@broadcom.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.acl_entry_config import AclEntryConfig  # noqa: F401,E501
from swagger_client.models.acl_entry_input_interface import AclEntryInputInterface  # noqa: F401,E501
from swagger_client.models.acl_entry_ipv4 import AclEntryIpv4  # noqa: F401,E501
from swagger_client.models.acl_entry_ipv6 import AclEntryIpv6  # noqa: F401,E501
from swagger_client.models.acl_entry_l2 import AclEntryL2  # noqa: F401,E501
from swagger_client.models.acl_entry_transport import AclEntryTransport  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_actions import AclOpenconfigaclaclAclsetsAclentriesActions  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_config import AclOpenconfigaclaclAclsetsAclentriesConfig  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_inputinterface import AclOpenconfigaclaclAclsetsAclentriesInputinterface  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_ipv4 import AclOpenconfigaclaclAclsetsAclentriesIpv4  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_ipv6 import AclOpenconfigaclaclAclsetsAclentriesIpv6  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_l2 import AclOpenconfigaclaclAclsetsAclentriesL2  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_transport import AclOpenconfigaclaclAclsetsAclentriesTransport  # noqa: F401,E501


class PostAclEntryConfig(AclEntryConfig):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_acll2': 'AclOpenconfigaclaclAclsetsAclentriesL2',
        'openconfig_aclipv4': 'AclOpenconfigaclaclAclsetsAclentriesIpv4',
        'openconfig_aclipv6': 'AclOpenconfigaclaclAclsetsAclentriesIpv6',
        'openconfig_acltransport': 'AclOpenconfigaclaclAclsetsAclentriesTransport',
        'openconfig_aclinput_interface': 'AclOpenconfigaclaclAclsetsAclentriesInputinterface',
        'openconfig_aclactions': 'AclOpenconfigaclaclAclsetsAclentriesActions'
    }

    attribute_map = {
        'openconfig_acll2': 'openconfig-acl:l2',
        'openconfig_aclipv4': 'openconfig-acl:ipv4',
        'openconfig_aclipv6': 'openconfig-acl:ipv6',
        'openconfig_acltransport': 'openconfig-acl:transport',
        'openconfig_aclinput_interface': 'openconfig-acl:input-interface',
        'openconfig_aclactions': 'openconfig-acl:actions'
    }

    def __init__(self, openconfig_acll2=None, openconfig_aclipv4=None, openconfig_aclipv6=None, openconfig_acltransport=None, openconfig_aclinput_interface=None, openconfig_aclactions=None):  # noqa: E501
        """PostAclEntryConfig - a model defined in Swagger"""  # noqa: E501

        self._openconfig_acll2 = None
        self._openconfig_aclipv4 = None
        self._openconfig_aclipv6 = None
        self._openconfig_acltransport = None
        self._openconfig_aclinput_interface = None
        self._openconfig_aclactions = None
        self.discriminator = None

        if openconfig_acll2 is not None:
            self.openconfig_acll2 = openconfig_acll2
        if openconfig_aclipv4 is not None:
            self.openconfig_aclipv4 = openconfig_aclipv4
        if openconfig_aclipv6 is not None:
            self.openconfig_aclipv6 = openconfig_aclipv6
        if openconfig_acltransport is not None:
            self.openconfig_acltransport = openconfig_acltransport
        if openconfig_aclinput_interface is not None:
            self.openconfig_aclinput_interface = openconfig_aclinput_interface
        if openconfig_aclactions is not None:
            self.openconfig_aclactions = openconfig_aclactions

    @property
    def openconfig_acll2(self):
        """Gets the openconfig_acll2 of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_acll2 of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesL2
        """
        return self._openconfig_acll2

    @openconfig_acll2.setter
    def openconfig_acll2(self, openconfig_acll2):
        """Sets the openconfig_acll2 of this PostAclEntryConfig.


        :param openconfig_acll2: The openconfig_acll2 of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesL2
        """

        self._openconfig_acll2 = openconfig_acll2

    @property
    def openconfig_aclipv4(self):
        """Gets the openconfig_aclipv4 of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_aclipv4 of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesIpv4
        """
        return self._openconfig_aclipv4

    @openconfig_aclipv4.setter
    def openconfig_aclipv4(self, openconfig_aclipv4):
        """Sets the openconfig_aclipv4 of this PostAclEntryConfig.


        :param openconfig_aclipv4: The openconfig_aclipv4 of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesIpv4
        """

        self._openconfig_aclipv4 = openconfig_aclipv4

    @property
    def openconfig_aclipv6(self):
        """Gets the openconfig_aclipv6 of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_aclipv6 of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesIpv6
        """
        return self._openconfig_aclipv6

    @openconfig_aclipv6.setter
    def openconfig_aclipv6(self, openconfig_aclipv6):
        """Sets the openconfig_aclipv6 of this PostAclEntryConfig.


        :param openconfig_aclipv6: The openconfig_aclipv6 of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesIpv6
        """

        self._openconfig_aclipv6 = openconfig_aclipv6

    @property
    def openconfig_acltransport(self):
        """Gets the openconfig_acltransport of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_acltransport of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesTransport
        """
        return self._openconfig_acltransport

    @openconfig_acltransport.setter
    def openconfig_acltransport(self, openconfig_acltransport):
        """Sets the openconfig_acltransport of this PostAclEntryConfig.


        :param openconfig_acltransport: The openconfig_acltransport of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesTransport
        """

        self._openconfig_acltransport = openconfig_acltransport

    @property
    def openconfig_aclinput_interface(self):
        """Gets the openconfig_aclinput_interface of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_aclinput_interface of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesInputinterface
        """
        return self._openconfig_aclinput_interface

    @openconfig_aclinput_interface.setter
    def openconfig_aclinput_interface(self, openconfig_aclinput_interface):
        """Sets the openconfig_aclinput_interface of this PostAclEntryConfig.


        :param openconfig_aclinput_interface: The openconfig_aclinput_interface of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesInputinterface
        """

        self._openconfig_aclinput_interface = openconfig_aclinput_interface

    @property
    def openconfig_aclactions(self):
        """Gets the openconfig_aclactions of this PostAclEntryConfig.  # noqa: E501


        :return: The openconfig_aclactions of this PostAclEntryConfig.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesActions
        """
        return self._openconfig_aclactions

    @openconfig_aclactions.setter
    def openconfig_aclactions(self, openconfig_aclactions):
        """Sets the openconfig_aclactions of this PostAclEntryConfig.


        :param openconfig_aclactions: The openconfig_aclactions of this PostAclEntryConfig.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesActions
        """

        self._openconfig_aclactions = openconfig_aclactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostAclEntryConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostAclEntryConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
