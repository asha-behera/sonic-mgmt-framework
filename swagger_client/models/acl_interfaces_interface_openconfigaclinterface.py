# coding: utf-8

"""
    Sonic NMS

    Network management Open APIs for Broadcom's Sonic.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: mohammed.faraaz@broadcom.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.acl_openconfigaclacl_aclsets_aclentries_inputinterface_interfaceref import AclOpenconfigaclaclAclsetsAclentriesInputinterfaceInterfaceref  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_interfaces_config import AclOpenconfigaclaclInterfacesConfig  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_interfaces_egressaclsets import AclOpenconfigaclaclInterfacesEgressaclsets  # noqa: F401,E501
from swagger_client.models.acl_openconfigaclacl_interfaces_ingressaclsets import AclOpenconfigaclaclInterfacesIngressaclsets  # noqa: F401,E501


class AclInterfacesInterfaceOpenconfigaclinterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'AclOpenconfigaclaclInterfacesConfig',
        'interface_ref': 'AclOpenconfigaclaclAclsetsAclentriesInputinterfaceInterfaceref',
        'ingress_acl_sets': 'AclOpenconfigaclaclInterfacesIngressaclsets',
        'egress_acl_sets': 'AclOpenconfigaclaclInterfacesEgressaclsets'
    }

    attribute_map = {
        'config': 'config',
        'interface_ref': 'interface-ref',
        'ingress_acl_sets': 'ingress-acl-sets',
        'egress_acl_sets': 'egress-acl-sets'
    }

    def __init__(self, config=None, interface_ref=None, ingress_acl_sets=None, egress_acl_sets=None):  # noqa: E501
        """AclInterfacesInterfaceOpenconfigaclinterface - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._interface_ref = None
        self._ingress_acl_sets = None
        self._egress_acl_sets = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if interface_ref is not None:
            self.interface_ref = interface_ref
        if ingress_acl_sets is not None:
            self.ingress_acl_sets = ingress_acl_sets
        if egress_acl_sets is not None:
            self.egress_acl_sets = egress_acl_sets

    @property
    def config(self):
        """Gets the config of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501


        :return: The config of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :rtype: AclOpenconfigaclaclInterfacesConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this AclInterfacesInterfaceOpenconfigaclinterface.


        :param config: The config of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :type: AclOpenconfigaclaclInterfacesConfig
        """

        self._config = config

    @property
    def interface_ref(self):
        """Gets the interface_ref of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501


        :return: The interface_ref of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :rtype: AclOpenconfigaclaclAclsetsAclentriesInputinterfaceInterfaceref
        """
        return self._interface_ref

    @interface_ref.setter
    def interface_ref(self, interface_ref):
        """Sets the interface_ref of this AclInterfacesInterfaceOpenconfigaclinterface.


        :param interface_ref: The interface_ref of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :type: AclOpenconfigaclaclAclsetsAclentriesInputinterfaceInterfaceref
        """

        self._interface_ref = interface_ref

    @property
    def ingress_acl_sets(self):
        """Gets the ingress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501


        :return: The ingress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :rtype: AclOpenconfigaclaclInterfacesIngressaclsets
        """
        return self._ingress_acl_sets

    @ingress_acl_sets.setter
    def ingress_acl_sets(self, ingress_acl_sets):
        """Sets the ingress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.


        :param ingress_acl_sets: The ingress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :type: AclOpenconfigaclaclInterfacesIngressaclsets
        """

        self._ingress_acl_sets = ingress_acl_sets

    @property
    def egress_acl_sets(self):
        """Gets the egress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501


        :return: The egress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :rtype: AclOpenconfigaclaclInterfacesEgressaclsets
        """
        return self._egress_acl_sets

    @egress_acl_sets.setter
    def egress_acl_sets(self, egress_acl_sets):
        """Sets the egress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.


        :param egress_acl_sets: The egress_acl_sets of this AclInterfacesInterfaceOpenconfigaclinterface.  # noqa: E501
        :type: AclOpenconfigaclaclInterfacesEgressaclsets
        """

        self._egress_acl_sets = egress_acl_sets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AclInterfacesInterfaceOpenconfigaclinterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AclInterfacesInterfaceOpenconfigaclinterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
